# Copyright (c) 1992 The Regents of the University of California.
# All rights reserved.  See copyright.h for copyright notice and limitation 
# of liability and disclaimer of warranty provisions.
# Copyright (c) 2011 Vincent Danjean <Vincent.Danjean@imag.fr>
#
# This is part of a GNU Makefile
#
# This file is used to defined flavors that will be compiled in
# nachos subdirectories and/or in the build/ subdirectory.
#
# You will probably edit this file to define new flavors
#
# This file includes all of the baseline code provided by Nachos.
# Whenever you add a .c or .cc file, put it in the appropriate 
# source list and/or only to your own flavor
#
# The dependency graph between assignments is:
#   1. THREADS (step3) before everything else
#   2. USERPROG (step4) must come before VM
#   3. USERPROG can come before or after FILESYS, but if USERPROG comes 
#	before (as in this distribution), then it must define FILESYS_STUB
#
#   Other than that, you have complete flexibility.

# You might want to play with the CFLAGS, but if you use -O it may
# break the thread system.  You might want to use -fno-inline if
# you need to call some inline functions from the debugger.

###########################################################################
# Group of files used to defined initial flavors
#
# ###################################
# # DO *NOT* MODIFY THESE VARIABLES #
# # if you want that initial nachos #
# # still compile                   #
# ###################################
# 
THREAD_SRC      :=      main.cc list.cc scheduler.cc synch.cc synchlist.cc \
                        system.cc thread.cc utility.cc threadtest.cc interrupt.cc \
                        stats.cc sysdep.cc timer.cc switch.S

USERPROG_SRC    :=      addrspace.cc bitmap.cc exception.cc progtest.cc console.cc \
                        machine.cc mipssim.cc translate.cc synchconsole.cc

VM_SRC          :=

FILESYS_SRC     :=      directory.cc filehdr.cc filesys.cc fstest.cc openfile.cc \
                        synchdisk.cc disk.cc

NETWORK_SRC     :=      nettest.cc post.cc network.cc
#
###########################################################################

# Flavors comming from original nachos.
# *************************************
# These flavors will be compiled *without* -DCHANGED under the name
# nachos-"flavor" in the 'build-origin/' directory
ORIG_FLAVORS=threads userprog filesys network vm

# Flavors compiled for the user
# *************************************
# These flavors will be compiled *with* -DCHANGED under the name
# nachos-"flavor" in the 'build/' directory

# By default, the same flavors as the original ones are compiled
USER_FLAVORS=$(ORIG_FLAVORS)
# Once some personnal flavor are defined, this list can be limited
# to the personal flavors
USER_FLAVORS=step2

###################################################################

# The general way to define a flavor is to use the define-flavor macro.
# It usage is the following:
# $(eval $(call define-flavor,flavor-name,base-flavor,\
#	source files,CPPFlags,include-dirs))
# with:
#   flavor-name: the (uniq) name of the flavor (should probably be added
#	to USER_FLAVORS)
#   base-flavor: optional, get the info from this (already defined) flavor
#	and add the info from the following argument. Useful when the
#	new flavor is a little improvement from an existing one.
#   source files: list of source files with its extension (.cc or .S)
#	without the subdirectory
#   CPPFlags: cpp flags added when compiling this flavor
#   include-dirs: list of subdirectories in which included files will be
#	searched

###################################################################
# Example : define a new flavor step2 based on the 'userprog' one that has
# one more source file (synchconsole.cc) :
#
$(eval $(call define-flavor,step2,userprog,synchconsole.cc))
###########################################################################

# Add here your personal flavors





###########################################################################
#            Original flavors
###########################################################################
# DO *NOT* MODIFY the reminding of this file
# if you want to still compile the initial flavors of NachOS

###########################################################################
######### threads
$(eval $(call define-flavor,threads,,\
  $(THREAD_SRC),\
  -DTHREADS,\
  threads machine))

###########################################################################
######### userprog
$(eval $(call define-flavor,userprog,,\
  $(THREAD_SRC) $(USERPROG_SRC),\
  -DUSER_PROGRAM -DFILESYS_NEEDED -DFILESYS_STUB,\
  bin filesys userprog threads machine))

# if file system done first!
# $(eval $(call define-flavor,userprog,,\
#   $(THREAD_SRC) $(USERPROG_SRC) $(FILESYS_SRC),\
#   -DUSER_PROGRAM -DFILESYS_NEEDED -DFILESYS,\
#    bin filesys userprog threads machine))

###########################################################################
######### filesys
$(eval $(call define-flavor,filesys,,\
  $(THREAD_SRC) $(USERPROG_SRC) $(VM_SRC) $(FILESYS_SRC),\
  -DTHREADS -DUSER_PROGRAM -DVM -DFILESYS_NEEDED -DFILESYS,\
  filesys vm userprog bin threads machine))

# bare bones version
# $(eval $(call define-flavor,filesys,,\
#   $(THREAD_SRC) $(FILESYS_SRC),\
#   -DTHREADS -DFILESYS_NEEDED -DFILESYS,\
#   filesys threads machine))

###########################################################################
######### network
$(eval $(call define-flavor,network,,\
  $(THREAD_SRC) $(USERPROG_SRC) $(VM_SRC) $(FILESYS_SRC) $(NETWORK_SRC),\
  -DUSER_PROGRAM -DVM -DFILESYS_NEEDED -DFILESYS -DNETWORK,\
  network filesys vm userprog bin threads machine))

# bare bones version
# $(eval $(call define-flavor,network,,\
#   $(THREAD_SRC) $(NETWORK_SRC),\
#   -DTHREADS -DNETWORK,\
#   network threads machine))

###########################################################################
######### vm
$(eval $(call define-flavor,vm,,\
  $(THREAD_SRC) $(USERPROG_SRC) $(VM_SRC),\
  -DUSER_PROGRAM  -DFILESYS_NEEDED -DFILESYS_STUB -DVM -DUSE_TLB,\
  filesys vm userprog bin threads machine))

# if file sys done first!
# $(eval $(call define-flavor,vm,,\
#   $(THREAD_SRC) $(USERPROG_SRC) $(FILESYS_SRC) $(VM_SRC),\
#   -DUSER_PROGRAM  -DFILESYS_NEEDED -DFILESYS -DVM -DUSE_TLB,\
#   filesys vm userprog bin threads machine))

###########################################################################
